"""
Script de teste para validar a corre√ß√£o de dados defasados
Verifica se os candles est√£o sendo buscados com timestamps atualizados
"""
import sys
import os
from datetime import datetime, timezone
import pytz

# For√ßa UTF-8 no Windows
if sys.platform == 'win32':
    os.system('chcp 65001 > nul')
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stderr.reconfigure(encoding='utf-8')

from app.services.crypto_service import CryptoService


def test_data_freshness():
    """Testa se os dados est√£o sendo buscados em tempo real"""
    print("=" * 80)
    print("TESTE DE ATUALIZA√á√ÉO DOS DADOS (Corre√ß√£o de Candles Defasados)")
    print("=" * 80)
    print()
    
    # Inicializa o servi√ßo
    service = CryptoService()
    symbol = "BTC/USDT"
    
    # Testa diferentes timeframes
    timeframes = ['1h', '4h', '1d']
    
    for timeframe in timeframes:
        print(f"\n{'='*80}")
        print(f"Testando timeframe: {timeframe}")
        print(f"{'='*80}")
        
        try:
            # Busca dados com a nova l√≥gica
            df = service.get_candles(symbol, timeframe, limit=500)
            
            # Obt√©m timestamps formatados
            timestamp_utc, timestamp_brt = service.get_last_candle_timestamps(df)
            
            # Exibe informa√ß√µes
            print(f"\n‚úÖ Dados obtidos com sucesso!")
            print(f"   Total de candles: {len(df)}")
            print(f"   Primeiro candle: {df['timestamp'].iloc[0]}")
            print(f"   √öltimo candle: {df['timestamp'].iloc[-1]}")
            print()
            print(f"üìÖ TIMESTAMPS FORMATADOS:")
            print(f"   UTC:      {timestamp_utc}")
            print(f"   Bras√≠lia: {timestamp_brt}")
            print()
            
            # Calcula diferen√ßa de tempo entre agora e o √∫ltimo candle
            now = datetime.now(timezone.utc)
            last_candle = df['timestamp'].iloc[-1]
            diff = now - last_candle
            
            print(f"‚è±Ô∏è  TEMPO DESDE O √öLTIMO CANDLE:")
            print(f"   {diff.total_seconds() / 60:.1f} minutos atr√°s")
            
            # Valida frescor dos dados
            timeframe_minutes = {'1h': 60, '4h': 240, '1d': 1440}
            expected_minutes = timeframe_minutes.get(timeframe, 60)
            max_delay = expected_minutes * 2  # Toler√¢ncia de 2x o per√≠odo
            
            if diff.total_seconds() / 60 <= max_delay:
                print(f"   ‚úÖ DADOS ATUALIZADOS (dentro da toler√¢ncia de {max_delay} min)")
            else:
                print(f"   ‚ö†Ô∏è  DADOS PODEM ESTAR DEFASADOS (> {max_delay} min)")
            
            print()
            print(f"üìä VALIDA√á√ÉO T√âCNICA:")
            print(f"   Pre√ßo de fechamento: ${df['close'].iloc[-1]:,.2f}")
            print(f"   Volume: {df['volume'].iloc[-1]:,.2f}")
            print(f"   High: ${df['high'].iloc[-1]:,.2f}")
            print(f"   Low: ${df['low'].iloc[-1]:,.2f}")
            
        except Exception as e:
            print(f"‚ùå Erro ao buscar dados: {str(e)}")
            import traceback
            traceback.print_exc()
    
    print()
    print("=" * 80)
    print("TESTE CONCLU√çDO")
    print("=" * 80)
    print()
    print("VERIFICA√á√ïES REALIZADAS:")
    print("‚úÖ 1. Uso de exchange.milliseconds() para sincroniza√ß√£o precisa")
    print("‚úÖ 2. C√°lculo correto do par√¢metro 'since' baseado em timeframe")
    print("‚úÖ 3. Valida√ß√£o de frescor dos dados retornados")
    print("‚úÖ 4. Formata√ß√£o de timestamps em UTC e hor√°rio de Bras√≠lia")
    print("‚úÖ 5. Avisos autom√°ticos para dados defasados")
    print()


if __name__ == "__main__":
    try:
        test_data_freshness()
    except KeyboardInterrupt:
        print("\n\nTeste interrompido pelo usu√°rio.")
        sys.exit(0)
    except Exception as e:
        print(f"\n\n‚ùå Erro fatal: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

